# This file is part of a knowledge base. It is used purely as an example
# to explain how it might be used.
---
# Any document represents a "pointer to a thing", this is called a
# `tsunki-thing` and as such is part of a repository, aka a `tsunki-context`.
# Tools (e.g. `natem`) can then inspect the `tsunki-contexts` and present the
# content of interest as a view (i.e. a `tsunki-facet` in our terms).

# Wherever possible (considered useful) URIs (/URLs) are expected, if a
# string skalar is not a valid URI, it will be translated into an URI, based
# on it's context.

# A pointer usually points to something, its `target`. If the targets point
# into the void, resp. the list is "empty", this means, it actually points
# to an abstract thing (i.e. concept, class, idea, resp. category). If the
# target is not empty, we are dealing with a concrete thing. As a URI is
# expected here, any non valid URI string will be interpreted as a tag-URI,
# i.e. `tag:<authority>,<date>:<Item>`, where <authority> will be replaced
# with the email-address from the config, the <date> with the current year,
# and the <Item> with the string found.
# Only abstract entities can become upper classes (see `relation/is`)
targets: # <array> of <string> # URI (e.g. `file:///path/to/photo.jpg`)

# autogenerated if empty (set for reproducibility)
id: "" # <string> # urn:uuid:

# The names (alternative names, nicknames, ...) this tsunki-thing is known
# as (for quick reference).
alias: # <array> of <string>

# This is used to locate the document. As per default the list contains
# the value of the filename without .yml. It is also used to indicate
# alternative places where this tsunki-thing can be found (e.g. external
# sources)
urls: # <array> of <string>

# An open map of relations to other tsunki-things. This is the entry point
# to generate views and actions from.
# Properties of the upper classes are inherited. Descendant things will
# inherit these properties.
relation:
  # The most important relation is `is`. It declares "conceptual inheritance"
  # and is used to gather properties from upper classes. Only abstrace entities
  # can become upper clases (see `targets`).
  is: # <array> of <string> # URL or relative path to an abstract tsunki-thing
      # optionally a priority penalty as integer can be added to the string by
      # using a space as delimiter
  # flat relation of tsunki-things this thing relies on (it's resources)
  has: # <array> of <string> # URL or relative path to a tsunki-thing
  # a loose (flat) connection to other tsunki-things
  knows: # <array> of <string> # URL or relative path to a tsunki-thing
  # relations can be extended at run-time; custom relations that provide
  # actual actions, can be specified below as "modules"

# additional modules that can access external tools; this tools can then be
# referenced above in the relations context
modules: # <array> of <object> of <string>(key), <string>(value) pairs

# All parameters that directly specify the properties of this tsunki-thing.
# Properties of the upper classes are inherited. Descendant things will
# inherit these properties.
property: # <object>
  name:
    en: "Example Tsunki-Thing"
    # context based references, see below for details on '_references'
    _references: # <array> of <string> # URIs
      - &ref000
        name: "The Example Name"
        uri: "https://example.com/en/name"
    # a description of this very thing
    description:
      short:
        en: "This is just an example tsunki-thing."
      long:
        en: |
          This is an example of a meta data document of a knowledge base
          that was build with YAML files. In particular, this lines show
          how to add a longer description for a certain language.

# yet another meta layer, meta data about the meta data starts with a "_"

# the type of this thing used by parsers to verify its compatibility and
# to choose the yaml-schema.
# It will be translated to
# "https://gitlab.com/zwischenloesung/tsunki/-/raw/master/schema/tsunki_thing_schema-0.1.yml?inline=false"
_type:
  name: "tsunki"
  version: "0.1"

# the version of this document, if not specified (null or empty string), this
# is automatically set to # the repo version per default (if available)
_version: # <string>

# tsunki-contexts as URLs of other sources this tsunki-thing depends on,
# tsunki-things in repositories mentioned here can be referenced 'locally'
# (relative to the project-root
_dependencies: # <array> of <string> # URLs

# Provide some information about who edited the content.
# This can be specified for any part of the tree, at any depth needed,
# just use the '_authors'/'_references' keywords
_authors: # <array> of <object> of <string>(key), <string>(value) pairs
  - name: "Michael Lustenberger"
    uri: "mailto:mic@inofix.ch"

# Notes where the infos here come from, and where to find further details.
# This can be specified for any part of the tree, at any depth needed,
# just use the '_authors'/'_references' keywords
_references:
  - name: "The Example Web-Site"
    uri: "https://example.com/about"
  - *ref000

